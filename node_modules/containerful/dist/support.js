"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _a, _b;
Object.defineProperty(exports, "__esModule", { value: true });
var init_1 = require("./init");
var constants_1 = require("./constants");
var jwt_decode_1 = __importDefault(require("jwt-decode"));
var sdk_1 = require("./sdk");
var chalk_1 = __importDefault(require("chalk"));
var path_1 = __importDefault(require("path"));
var yaml_1 = __importDefault(require("yaml"));
var fs_1 = __importDefault(require("fs"));
var winston_1 = __importDefault(require("winston"));
exports.sleep = function (ms) { return new Promise(function (r) { return setTimeout(r, ms); }); };
function transformName(name) {
    return name
        .toLowerCase()
        .replace('_', '-')
        .replace(' ', '-');
}
exports.transformName = transformName;
function loadDockerCompose(argv) {
    var dockerComposePath = argv.file;
    if (!dockerComposePath || !fs_1.default.existsSync(dockerComposePath)) {
        throw new Error('cannot find ' + dockerComposePath);
    }
    var dockerComposeYaml = fs_1.default
        .readFileSync(dockerComposePath, { encoding: 'utf8' })
        .toString();
    var dockerComposeObject = yaml_1.default.parse(dockerComposeYaml);
    return {
        dockerComposeYaml: dockerComposeYaml,
        dockerComposeObject: dockerComposeObject,
    };
}
exports.loadDockerCompose = loadDockerCompose;
function getDockerComposeMeta(dockerComposeObj) {
    var meta = dockerComposeObj[constants_1.DOCKER_COMPOSE_CONFIG_FIELD] || {};
    return meta;
}
exports.getDockerComposeMeta = getDockerComposeMeta;
function readFile(path) {
    if (!fs_1.default.existsSync(path)) {
        throw new Error("file " + path + "\u00A0does not exists");
    }
    return fs_1.default.readFileSync(path, 'utf8');
}
exports.readFile = readFile;
function getUid() {
    var store = init_1.initStore();
    var token = store.get(constants_1.USER_TOKEN_CONFIG_KEY);
    if (!token) {
        return;
    }
    var _a = jwt_decode_1.default(token).user_id, user_id = _a === void 0 ? null : _a;
    return user_id;
}
exports.getUid = getUid;
function getToken() {
    var store = init_1.initStore();
    var token = store.get(constants_1.USER_TOKEN_CONFIG_KEY);
    return token;
}
exports.getToken = getToken;
var makeMiddleware = function (fun) { return function (command) {
    var handler = command.handler;
    command.handler = function (argv) { return __awaiter(void 0, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fun(argv, function (a) { return handler(a || argv); })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); };
    return command;
}; };
exports.needsLogin = makeMiddleware(function (argv, next) { return __awaiter(void 0, void 0, void 0, function () {
    var token;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                token = getToken();
                if (!token) {
                    console.log(chalk_1.default.red('You need to login to use this command'));
                    process.exit(1);
                }
                sdk_1.graphqlClient.setHeader('Authorization', token);
                return [4 /*yield*/, next()];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
exports.withErrorHandling = makeMiddleware(function (argv, next) { return __awaiter(void 0, void 0, void 0, function () {
    var e_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, next()];
            case 1:
                _a.sent();
                return [3 /*break*/, 3];
            case 2:
                e_1 = _a.sent();
                exports.printRed(e_1.name + e_1.message);
                return [2 /*return*/];
            case 3: return [2 /*return*/];
        }
    });
}); });
exports.print = console.log;
exports.printRed = function (x) { return console.log(chalk_1.default.red(x)); };
exports.printGreen = function (x) { return console.log(chalk_1.default.green(x)); };
function validateServiceNames(_a) {
    var dockerCompose = _a.dockerCompose;
    var _b;
    Object.keys(((_b = dockerCompose) === null || _b === void 0 ? void 0 : _b.services) || {}).forEach(function (k) {
        validateName(k);
    });
}
exports.validateServiceNames = validateServiceNames;
var NAME_REGEX = new RegExp('(?=^[a-z0-9-]{1,63}$)(?!^-.*)(?!.*-$)');
function validateName(name) {
    if (!NAME_REGEX.test(name)) {
        throw new Error(("Invlid name: " + name + ". Service name must use only lowercase \n        alphanumeric characters and dashes. Cannot begin or end with a dash, \n        and cannot be longer than 63 characters.").replace(/\n/g, ''));
    }
    return name;
}
exports.validateName = validateName;
var format = winston_1.default.format, transports = winston_1.default.transports;
var logFormat = format.printf(function (info) {
    var msg = typeof info.message === 'object'
        ? JSON.stringify(info.message, null, 4)
        : info.message;
    return info.timestamp + " " + msg;
});
exports.winstonConf = {
    format: format.combine(format.label({
        label: path_1.default.basename(((_b = (_a = process) === null || _a === void 0 ? void 0 : _a.mainModule) === null || _b === void 0 ? void 0 : _b.filename) || ''),
    }), format.timestamp({ format: 'YYYY-MM-DD HH' }), 
    // Format the metadata object
    format.metadata({
        fillExcept: ['message', 'level', 'timestamp', 'label'],
    })),
    transports: [
        new transports.Console({
            format: format.combine(format.colorize({}), logFormat),
        }),
    ],
};
