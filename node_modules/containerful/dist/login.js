"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var open_1 = __importDefault(require("open"));
var path_1 = __importDefault(require("path"));
var constants_1 = require("./constants");
var constants_2 = require("./constants");
var await_to_js_1 = __importDefault(require("await-to-js"));
var sdk_1 = require("./sdk");
var init_1 = require("./init");
var winston_1 = __importDefault(require("winston"));
var LOGIN_STATIC_SITE_PATH = path_1.default.resolve(__dirname, constants_2.LOGIN_STATIC_SITE_DIR); // TODO use require.resolve to use the static site from npm
function newAuthServer(_a) {
    var _this = this;
    return new Promise(function (resolve, rej) {
        var app = express_1.default();
        app.use(express_1.default.json());
        app.post(constants_1.LOCALHOST_LISTENER, function (req, res) { return __awaiter(_this, void 0, void 0, function () {
            var _a, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 2, , 3]);
                        winston_1.default.debug({ body: req.body });
                        if (!req.body.user) {
                            throw Error('user not found');
                        }
                        res.send({ ok: 1 });
                        server.close();
                        _a = resolve;
                        return [4 /*yield*/, req.body];
                    case 1:
                        _a.apply(void 0, [_b.sent()]);
                        return [3 /*break*/, 3];
                    case 2:
                        e_1 = _b.sent();
                        rej(e_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        }); });
        app.use(express_1.default.static(LOGIN_STATIC_SITE_PATH));
        var server = app.listen(0, function () {
            var info = server.address();
            var address = info.port
                ? 'http://localhost:' + info.port
                : info;
            console.log('login at ' + address);
            open_1.default(address, { background: false, wait: false });
        });
    });
}
function pureHandler() {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var _b, user, idToken, _c, error, res, _d, expiresIn, isSignup, token;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, newAuthServer({})];
                case 1:
                    _b = _e.sent(), user = _b.user, idToken = _b.idToken;
                    if (!idToken) {
                        throw Error('idToken not found');
                    }
                    return [4 /*yield*/, await_to_js_1.default(sdk_1.sdk.Login({ input: { idToken: idToken } }))];
                case 2:
                    _c = _e.sent(), error = _c[0], res = _c[1];
                    if (error || !res) {
                        throw error;
                    }
                    console.log("Welcome back " + ((_a = user) === null || _a === void 0 ? void 0 : _a.displayName));
                    _d = res.login || {}, expiresIn = _d.expiresIn, isSignup = _d.isSignup, token = _d.token;
                    // TODO save the token and user info in program data
                    return [2 /*return*/, { token: token }];
            }
        });
    });
}
exports.pureHandler = pureHandler;
exports.default = {
    command: 'login',
    describe: 'Logins to cli',
    builder: function (argv) {
        argv.option('github-token', {
            type: 'string',
            default: '',
            required: false,
            description: 'The github token to use for login, instead of using the browser',
        });
    },
    handler: function (argv) { return __awaiter(void 0, void 0, void 0, function () {
        var store, githubToken, token_1, token;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    store = init_1.initStore();
                    githubToken = argv['github-token'];
                    if (!!githubToken) return [3 /*break*/, 2];
                    return [4 /*yield*/, pureHandler()];
                case 1:
                    token_1 = (_a.sent()).token;
                    store.set(constants_1.USER_TOKEN_CONFIG_KEY, token_1);
                    return [2 /*return*/];
                case 2: return [4 /*yield*/, loginWithGithub({
                        githubToken: githubToken,
                    })];
                case 3:
                    token = (_a.sent()).token;
                    store.set(constants_1.USER_TOKEN_CONFIG_KEY, token);
                    console.log("Welcome back");
                    return [2 /*return*/];
            }
        });
    }); },
}; // as CommandModule
function loginWithGithub(_a) {
    var githubToken = _a.githubToken;
    return __awaiter(this, void 0, void 0, function () {
        var loginWithGithub;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    console.log("using the github token to login");
                    return [4 /*yield*/, sdk_1.sdk.LoginWithGithub({
                            input: { githubToken: githubToken },
                        })];
                case 1:
                    loginWithGithub = (_b.sent()).loginWithGithub;
                    return [2 /*return*/, loginWithGithub || {}];
            }
        });
    });
}
exports.loginWithGithub = loginWithGithub;
