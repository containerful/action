import { GraphQLClient } from 'graphql-request';
export declare type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    ObjectId: any;
    AnyScalar: any;
    Date: any;
    DateTime: any;
    Json: any;
    Time: any;
};
export declare type DataPoint = {
    __typename?: 'DataPoint';
    x?: Maybe<Scalars['Float']>;
    y?: Maybe<Scalars['Float']>;
    serviceName?: Maybe<Scalars['String']>;
};
export declare type DeployStackInput = {
    stackId?: Maybe<Scalars['String']>;
    firstDeploy?: Maybe<Scalars['Boolean']>;
    dockerComposeYaml?: Maybe<Scalars['String']>;
    stackName?: Maybe<Scalars['String']>;
    gitRepoUrl?: Maybe<Scalars['String']>;
    region?: Maybe<Region>;
    envFiles?: Maybe<Array<Maybe<EnvFileInput>>>;
};
export declare type DesployStackOutput = {
    __typename?: 'DesployStackOutput';
    _id?: Maybe<Scalars['String']>;
    firstTimeDeployment?: Maybe<Scalars['Boolean']>;
};
export declare enum Direction {
    Asc = "ASC",
    Desc = "DESC"
}
export declare type EnvFile = {
    __typename?: 'EnvFile';
    stackId?: Maybe<Scalars['String']>;
    path?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    parsedEnvAsJson?: Maybe<Scalars['String']>;
};
export declare type EnvFileInput = {
    path?: Maybe<Scalars['String']>;
    content?: Maybe<Scalars['String']>;
    stackId?: Maybe<Scalars['String']>;
    servicesDockerComposeNames?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type Error = {
    __typename?: 'Error';
    message?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type GetLogsInput = {
    serviceNames?: Maybe<Array<Maybe<Scalars['String']>>>;
    from?: Maybe<Scalars['String']>;
    to?: Maybe<Scalars['String']>;
    untilInsertId?: Maybe<Scalars['String']>;
};
export declare type GetLogsNodes = {
    __typename?: 'GetLogsNodes';
    nodes?: Maybe<Array<Maybe<LogsNode>>>;
    lastInsertId?: Maybe<Scalars['String']>;
};
export declare type GitProfile = {
    __typename?: 'GitProfile';
    prettyName?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    type?: Maybe<GitProvider>;
};
export declare enum GitProvider {
    Github = "GITHUB"
}
export declare type GitRepo = {
    __typename?: 'GitRepo';
    url?: Maybe<Scalars['String']>;
    prettyName?: Maybe<Scalars['String']>;
    type?: Maybe<GitProvider>;
};
export declare type LoginInput = {
    idToken: Scalars['String'];
};
export declare type LoginOutput = {
    __typename?: 'LoginOutput';
    token?: Maybe<Scalars['String']>;
    expiresIn?: Maybe<Scalars['Int']>;
    isSignup?: Maybe<Scalars['Boolean']>;
};
export declare type LoginWithGithubInput = {
    githubToken: Scalars['String'];
};
export declare type LogsNode = {
    __typename?: 'LogsNode';
    datetime?: Maybe<Scalars['String']>;
    line?: Maybe<Scalars['String']>;
    service?: Maybe<Scalars['String']>;
};
export declare type MetricsInput = {
    lastHours?: Maybe<Scalars['Int']>;
    binSecondsWidth?: Maybe<Scalars['Int']>;
    serviceNames?: Maybe<Array<Scalars['String']>>;
    nowUnix?: Maybe<Scalars['Int']>;
};
export declare type Mutation = {
    __typename?: 'Mutation';
    deployStack?: Maybe<DesployStackOutput>;
    login?: Maybe<LoginOutput>;
    loginWithGithub?: Maybe<LoginOutput>;
    uploadEnvFiles?: Maybe<Scalars['Boolean']>;
};
export declare type MutationDeployStackArgs = {
    input?: Maybe<DeployStackInput>;
};
export declare type MutationLoginArgs = {
    input?: Maybe<LoginInput>;
};
export declare type MutationLoginWithGithubArgs = {
    input?: Maybe<LoginWithGithubInput>;
};
export declare type MutationUploadEnvFilesArgs = {
    input?: Maybe<UploadEnvFilesInput>;
};
export declare type PageInfo = {
    __typename?: 'PageInfo';
    startCursor?: Maybe<Scalars['AnyScalar']>;
    endCursor?: Maybe<Scalars['AnyScalar']>;
    hasNextPage?: Maybe<Scalars['Boolean']>;
    hasPreviousPage?: Maybe<Scalars['Boolean']>;
};
export declare type Query = {
    __typename?: 'Query';
    mongoke_version?: Maybe<Scalars['String']>;
    User?: Maybe<User>;
    Users: UserConnection;
    Stack?: Maybe<Stack>;
    Stacks: StackConnection;
    Template?: Maybe<Template>;
    Templates: TemplateConnection;
    getLogs?: Maybe<GetLogsNodes>;
    getRequestsCountMetrics?: Maybe<Array<Maybe<DataPoint>>>;
    getRequestsLatencyMetrics?: Maybe<Array<Maybe<DataPoint>>>;
};
export declare type QueryUserArgs = {
    where?: Maybe<UserWhere>;
};
export declare type QueryUsersArgs = {
    where?: Maybe<UserWhere>;
    cursorField?: Maybe<UserFields>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['AnyScalar']>;
    before?: Maybe<Scalars['AnyScalar']>;
};
export declare type QueryStackArgs = {
    where?: Maybe<StackWhere>;
};
export declare type QueryStacksArgs = {
    where?: Maybe<StackWhere>;
    cursorField?: Maybe<StackFields>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['AnyScalar']>;
    before?: Maybe<Scalars['AnyScalar']>;
};
export declare type QueryTemplateArgs = {
    where?: Maybe<TemplateWhere>;
};
export declare type QueryTemplatesArgs = {
    where?: Maybe<TemplateWhere>;
    cursorField?: Maybe<TemplateFields>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['AnyScalar']>;
    before?: Maybe<Scalars['AnyScalar']>;
};
export declare type QueryGetLogsArgs = {
    input?: Maybe<GetLogsInput>;
};
export declare type QueryGetRequestsCountMetricsArgs = {
    input?: Maybe<MetricsInput>;
};
export declare type QueryGetRequestsLatencyMetricsArgs = {
    input?: Maybe<MetricsInput>;
};
export declare enum Region {
    AsiaEast1 = "asia_east1",
    AsiaNortheast1 = "asia_northeast1",
    EuropeNorth1 = "europe_north1",
    EuropeWest1 = "europe_west1",
    EuropeWest4 = "europe_west4",
    UsCentral1 = "us_central1",
    UsEast1 = "us_east1",
    UsEast4 = "us_east4",
    UsWest1 = "us_west1"
}
export declare type Service = {
    __typename?: 'Service';
    name?: Maybe<Scalars['String']>;
    template?: Maybe<StackTemplate>;
    cloudConsoleName?: Maybe<Scalars['String']>;
    image?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    environmentJson?: Maybe<Scalars['String']>;
    envFilesPaths?: Maybe<Array<Maybe<Scalars['String']>>>;
    isActive?: Maybe<Scalars['Boolean']>;
    ramMbSize?: Maybe<Scalars['Int']>;
    vcpusCount?: Maybe<Scalars['Int']>;
};
export declare type Stack = {
    __typename?: 'Stack';
    name?: Maybe<Scalars['String']>;
    status?: Maybe<StackStatus>;
    region?: Maybe<Region>;
    pulumiStateUrl?: Maybe<Scalars['String']>;
    envFiles?: Maybe<Array<Maybe<EnvFile>>>;
    _id?: Maybe<Scalars['ObjectId']>;
    createdAtUnix?: Maybe<Scalars['Int']>;
    deployedByUserUid?: Maybe<Scalars['String']>;
    dockerComposeJson?: Maybe<Scalars['String']>;
    dockerComposeYaml?: Maybe<Scalars['String']>;
    services?: Maybe<Array<Maybe<Service>>>;
    assoicatedGitRepo?: Maybe<GitRepo>;
    deploymentsCount?: Maybe<Scalars['Int']>;
    lastDeploymentError?: Maybe<Error>;
};
export declare type StackConnection = {
    __typename?: 'StackConnection';
    nodes: Array<Maybe<Stack>>;
    edges: Array<Maybe<StackEdge>>;
    pageInfo: PageInfo;
};
export declare type StackEdge = {
    __typename?: 'StackEdge';
    node?: Maybe<Stack>;
    cursor?: Maybe<Scalars['AnyScalar']>;
};
export declare enum StackFields {
    Name = "name",
    Status = "status",
    Region = "region",
    PulumiStateUrl = "pulumiStateUrl",
    Id = "_id",
    CreatedAtUnix = "createdAtUnix",
    DeployedByUserUid = "deployedByUserUid",
    DockerComposeJson = "dockerComposeJson",
    DockerComposeYaml = "dockerComposeYaml",
    DeploymentsCount = "deploymentsCount"
}
export declare type StackGitIntegration = {
    __typename?: 'StackGitIntegration';
    url?: Maybe<Scalars['String']>;
};
export declare enum StackStatus {
    Creating = "CREATING",
    Active = "ACTIVE",
    Error = "ERROR"
}
export declare type StackTemplate = {
    __typename?: 'StackTemplate';
    gitRepo?: Maybe<GitRepo>;
    iconSrc?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
export declare type StackWhere = {
    and?: Maybe<Array<Maybe<StackWhere>>>;
    or?: Maybe<Array<Maybe<StackWhere>>>;
    name?: Maybe<WhereString>;
    status?: Maybe<WhereStackStatus>;
    region?: Maybe<WhereRegion>;
    pulumiStateUrl?: Maybe<WhereString>;
    _id?: Maybe<WhereObjectId>;
    createdAtUnix?: Maybe<WhereInt>;
    deployedByUserUid?: Maybe<WhereString>;
    dockerComposeJson?: Maybe<WhereString>;
    dockerComposeYaml?: Maybe<WhereString>;
    deploymentsCount?: Maybe<WhereInt>;
};
export declare type Template = {
    __typename?: 'Template';
    _id?: Maybe<Scalars['ObjectId']>;
    gitRepo?: Maybe<GitRepo>;
    name?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    iconSrc?: Maybe<Scalars['String']>;
    envVarsSchemaJson?: Maybe<Scalars['String']>;
    dockerComposeYaml?: Maybe<Scalars['String']>;
};
export declare type TemplateConnection = {
    __typename?: 'TemplateConnection';
    nodes: Array<Maybe<Template>>;
    edges: Array<Maybe<TemplateEdge>>;
    pageInfo: PageInfo;
};
export declare type TemplateEdge = {
    __typename?: 'TemplateEdge';
    node?: Maybe<Template>;
    cursor?: Maybe<Scalars['AnyScalar']>;
};
export declare enum TemplateFields {
    Id = "_id",
    Name = "name",
    Description = "description",
    IconSrc = "iconSrc",
    EnvVarsSchemaJson = "envVarsSchemaJson",
    DockerComposeYaml = "dockerComposeYaml"
}
export declare type TemplateWhere = {
    and?: Maybe<Array<Maybe<TemplateWhere>>>;
    or?: Maybe<Array<Maybe<TemplateWhere>>>;
    _id?: Maybe<WhereObjectId>;
    name?: Maybe<WhereString>;
    description?: Maybe<WhereString>;
    iconSrc?: Maybe<WhereString>;
    envVarsSchemaJson?: Maybe<WhereString>;
    dockerComposeYaml?: Maybe<WhereString>;
};
export declare type UploadEnvFilesInput = {
    files?: Maybe<Array<Maybe<EnvFileInput>>>;
    stackId?: Maybe<Scalars['String']>;
    overwrite?: Maybe<Scalars['Boolean']>;
};
export declare type User = {
    __typename?: 'User';
    uid?: Maybe<Scalars['String']>;
    photoUrl?: Maybe<Scalars['String']>;
    displayName?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    gitIntegration?: Maybe<GitProfile>;
    stacksReferences: StackConnection;
};
export declare type UserStacksReferencesArgs = {
    where?: Maybe<StackWhere>;
    cursorField?: Maybe<StackFields>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['AnyScalar']>;
    before?: Maybe<Scalars['AnyScalar']>;
};
export declare type UserConnection = {
    __typename?: 'UserConnection';
    nodes: Array<Maybe<User>>;
    edges: Array<Maybe<UserEdge>>;
    pageInfo: PageInfo;
};
export declare type UserEdge = {
    __typename?: 'UserEdge';
    node?: Maybe<User>;
    cursor?: Maybe<Scalars['AnyScalar']>;
};
export declare enum UserFields {
    Uid = "uid",
    PhotoUrl = "photoUrl",
    DisplayName = "displayName",
    Email = "email"
}
export declare type UserWhere = {
    and?: Maybe<Array<Maybe<UserWhere>>>;
    or?: Maybe<Array<Maybe<UserWhere>>>;
    uid?: Maybe<WhereString>;
    photoUrl?: Maybe<WhereString>;
    displayName?: Maybe<WhereString>;
    email?: Maybe<WhereString>;
};
export declare type WhereBoolean = {
    in?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
    nin?: Maybe<Array<Maybe<Scalars['Boolean']>>>;
    eq?: Maybe<Scalars['Boolean']>;
    neq?: Maybe<Scalars['Boolean']>;
};
export declare type WhereFloat = {
    in?: Maybe<Array<Maybe<Scalars['Float']>>>;
    nin?: Maybe<Array<Maybe<Scalars['Float']>>>;
    eq?: Maybe<Scalars['Float']>;
    neq?: Maybe<Scalars['Float']>;
};
export declare type WhereGitProvider = {
    in?: Maybe<Array<Maybe<GitProvider>>>;
    nin?: Maybe<Array<Maybe<GitProvider>>>;
    eq?: Maybe<GitProvider>;
    neq?: Maybe<GitProvider>;
};
export declare type WhereId = {
    in?: Maybe<Array<Maybe<Scalars['ID']>>>;
    nin?: Maybe<Array<Maybe<Scalars['ID']>>>;
    eq?: Maybe<Scalars['ID']>;
    neq?: Maybe<Scalars['ID']>;
};
export declare type WhereInt = {
    in?: Maybe<Array<Maybe<Scalars['Int']>>>;
    nin?: Maybe<Array<Maybe<Scalars['Int']>>>;
    eq?: Maybe<Scalars['Int']>;
    neq?: Maybe<Scalars['Int']>;
};
export declare type WhereObjectId = {
    in?: Maybe<Array<Maybe<Scalars['ObjectId']>>>;
    nin?: Maybe<Array<Maybe<Scalars['ObjectId']>>>;
    eq?: Maybe<Scalars['ObjectId']>;
    neq?: Maybe<Scalars['ObjectId']>;
};
export declare type WhereRegion = {
    in?: Maybe<Array<Maybe<Region>>>;
    nin?: Maybe<Array<Maybe<Region>>>;
    eq?: Maybe<Region>;
    neq?: Maybe<Region>;
};
export declare type WhereStackStatus = {
    in?: Maybe<Array<Maybe<StackStatus>>>;
    nin?: Maybe<Array<Maybe<StackStatus>>>;
    eq?: Maybe<StackStatus>;
    neq?: Maybe<StackStatus>;
};
export declare type WhereString = {
    in?: Maybe<Array<Maybe<Scalars['String']>>>;
    nin?: Maybe<Array<Maybe<Scalars['String']>>>;
    eq?: Maybe<Scalars['String']>;
    neq?: Maybe<Scalars['String']>;
};
export declare type DeployStackMutationVariables = {
    input?: Maybe<DeployStackInput>;
};
export declare type DeployStackMutation = ({
    __typename?: 'Mutation';
} & {
    deployStack: Maybe<({
        __typename?: 'DesployStackOutput';
    } & Pick<DesployStackOutput, '_id' | 'firstTimeDeployment'>)>;
});
export declare type IsServiceDeployedQueryVariables = {
    id?: Maybe<Scalars['ObjectId']>;
};
export declare type IsServiceDeployedQuery = ({
    __typename?: 'Query';
} & {
    Stack: Maybe<({
        __typename?: 'Stack';
    } & Pick<Stack, 'status' | 'name' | '_id' | 'region'> & {
        services: Maybe<Array<Maybe<({
            __typename?: 'Service';
        } & Pick<Service, 'name' | 'url'>)>>>;
        lastDeploymentError: Maybe<({
            __typename?: 'Error';
        } & Pick<Error, 'name' | 'message'>)>;
    })>;
});
export declare type LoginMutationVariables = {
    input?: Maybe<LoginInput>;
};
export declare type LoginMutation = ({
    __typename?: 'Mutation';
} & {
    login: Maybe<({
        __typename?: 'LoginOutput';
    } & Pick<LoginOutput, 'isSignup' | 'token' | 'expiresIn'>)>;
});
export declare type LoginWithGithubMutationVariables = {
    input?: Maybe<LoginWithGithubInput>;
};
export declare type LoginWithGithubMutation = ({
    __typename?: 'Mutation';
} & {
    loginWithGithub: Maybe<({
        __typename?: 'LoginOutput';
    } & Pick<LoginOutput, 'isSignup' | 'token' | 'expiresIn'>)>;
});
export declare type UploadEnvFilesMutationVariables = {
    input?: Maybe<UploadEnvFilesInput>;
};
export declare type UploadEnvFilesMutation = ({
    __typename?: 'Mutation';
} & Pick<Mutation, 'uploadEnvFiles'>);
export declare type DownloadEnvFilesQueryVariables = {
    id?: Maybe<Scalars['ObjectId']>;
};
export declare type DownloadEnvFilesQuery = ({
    __typename?: 'Query';
} & {
    Stack: Maybe<({
        __typename?: 'Stack';
    } & {
        envFiles: Maybe<Array<Maybe<({
            __typename?: 'EnvFile';
        } & Pick<EnvFile, 'path' | 'content'>)>>>;
    })>;
});
export declare type GetLogsQueryVariables = {
    input?: Maybe<GetLogsInput>;
};
export declare type GetLogsQuery = ({
    __typename?: 'Query';
} & {
    getLogs: Maybe<({
        __typename?: 'GetLogsNodes';
    } & {
        nodes: Maybe<Array<Maybe<({
            __typename?: 'LogsNode';
        } & Pick<LogsNode, 'datetime' | 'line' | 'service'>)>>>;
    })>;
});
export declare type GetMetricsQueryVariables = {
    input?: Maybe<MetricsInput>;
};
export declare type GetMetricsQuery = ({
    __typename?: 'Query';
} & {
    reqCounts: Maybe<Array<Maybe<({
        __typename?: 'DataPoint';
    } & Pick<DataPoint, 'x' | 'y' | 'serviceName'>)>>>;
    reqLatencies: Maybe<Array<Maybe<({
        __typename?: 'DataPoint';
    } & Pick<DataPoint, 'x' | 'y' | 'serviceName'>)>>>;
});
export declare type GetStackDataQueryVariables = {};
export declare type GetStackDataQuery = ({
    __typename?: 'Query';
} & {
    Stack: Maybe<({
        __typename?: 'Stack';
    } & Pick<Stack, 'name' | 'dockerComposeYaml' | 'status' | 'region' | 'createdAtUnix' | 'deployedByUserUid'> & {
        services: Maybe<Array<Maybe<({
            __typename?: 'Service';
        } & Pick<Service, 'name' | 'cloudConsoleName' | 'url' | 'isActive' | 'image' | 'vcpusCount' | 'ramMbSize'>)>>>;
        assoicatedGitRepo: Maybe<({
            __typename?: 'GitRepo';
        } & Pick<GitRepo, 'url' | 'prettyName' | 'type'>)>;
    })>;
});
export declare type GetUserDataQueryVariables = {
    uid?: Maybe<Scalars['String']>;
};
export declare type GetUserDataQuery = ({
    __typename?: 'Query';
} & {
    User: Maybe<({
        __typename?: 'User';
    } & Pick<User, 'uid' | 'photoUrl' | 'displayName' | 'email'> & {
        stacksReferences: ({
            __typename?: 'StackConnection';
        } & {
            nodes: Array<Maybe<({
                __typename?: 'Stack';
            } & Pick<Stack, 'name' | '_id' | 'createdAtUnix'> & {
                assoicatedGitRepo: Maybe<({
                    __typename?: 'GitRepo';
                } & Pick<GitRepo, 'prettyName' | 'url' | 'type'>)>;
            })>>;
        });
    })>;
});
export declare type GetTemplateDataQueryVariables = {
    _id?: Maybe<Scalars['ObjectId']>;
};
export declare type GetTemplateDataQuery = ({
    __typename?: 'Query';
} & {
    Template: Maybe<({
        __typename?: 'Template';
    } & Pick<Template, '_id' | 'name' | 'description' | 'iconSrc' | 'envVarsSchemaJson' | 'dockerComposeYaml'> & {
        gitRepo: Maybe<({
            __typename?: 'GitRepo';
        } & Pick<GitRepo, 'url' | 'prettyName' | 'type'>)>;
    })>;
});
export declare const DeployStackDocument: import("graphql").DocumentNode;
export declare const IsServiceDeployedDocument: import("graphql").DocumentNode;
export declare const LoginDocument: import("graphql").DocumentNode;
export declare const LoginWithGithubDocument: import("graphql").DocumentNode;
export declare const UploadEnvFilesDocument: import("graphql").DocumentNode;
export declare const DownloadEnvFilesDocument: import("graphql").DocumentNode;
export declare const GetLogsDocument: import("graphql").DocumentNode;
export declare const GetMetricsDocument: import("graphql").DocumentNode;
export declare const GetStackDataDocument: import("graphql").DocumentNode;
export declare const GetUserDataDocument: import("graphql").DocumentNode;
export declare const GetTemplateDataDocument: import("graphql").DocumentNode;
export declare function getSdk(client: GraphQLClient): {
    DeployStack(variables?: DeployStackMutationVariables | undefined): Promise<DeployStackMutation>;
    IsServiceDeployed(variables?: IsServiceDeployedQueryVariables | undefined): Promise<IsServiceDeployedQuery>;
    Login(variables?: LoginMutationVariables | undefined): Promise<LoginMutation>;
    LoginWithGithub(variables?: LoginWithGithubMutationVariables | undefined): Promise<LoginWithGithubMutation>;
    UploadEnvFiles(variables?: UploadEnvFilesMutationVariables | undefined): Promise<UploadEnvFilesMutation>;
    DownloadEnvFiles(variables?: DownloadEnvFilesQueryVariables | undefined): Promise<DownloadEnvFilesQuery>;
    GetLogs(variables?: GetLogsQueryVariables | undefined): Promise<GetLogsQuery>;
    GetMetrics(variables?: GetMetricsQueryVariables | undefined): Promise<GetMetricsQuery>;
    GetStackData(variables?: GetStackDataQueryVariables | undefined): Promise<GetStackDataQuery>;
    GetUserData(variables?: GetUserDataQueryVariables | undefined): Promise<GetUserDataQuery>;
    GetTemplateData(variables?: GetTemplateDataQueryVariables | undefined): Promise<GetTemplateDataQuery>;
};
