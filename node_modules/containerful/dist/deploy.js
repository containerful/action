"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = __importDefault(require("path"));
var chalk_1 = __importDefault(require("chalk"));
var ora_1 = __importDefault(require("ora"));
var fs_1 = __importDefault(require("fs"));
var cli_table_1 = __importDefault(require("cli-table"));
var yaml_1 = __importDefault(require("yaml"));
var sdk_1 = require("./sdk");
var constants_1 = require("./constants");
var support_1 = require("./support");
var generatedGraphql_1 = require("./generatedGraphql");
var git_remote_origin_url_1 = __importDefault(require("git-remote-origin-url"));
var await_to_js_1 = __importDefault(require("await-to-js"));
var getEnvFiles_1 = require("./envFiles/getEnvFiles");
exports.default = {
    command: 'deploy',
    describe: 'Deploy services',
    aliases: [],
    builder: function (argv) {
        argv
            .option('prod', {
            type: 'boolean',
            describe: 'Deploy to the production environment',
        })
            .option('stackName', {
            describe: 'The name of the stack, defaults to the directory name',
            type: 'string',
        }).argv;
    },
    handler: function (argv) { return __awaiter(void 0, void 0, void 0, function () {
        var dockerComposePath, dockerComposeYaml, _a, ok, newDockerComposeYaml, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    dockerComposePath = path_1.default.resolve(argv.file) // TODO maybe on windows this replace / with \
                    ;
                    if (!dockerComposePath) {
                        throw Error('no path to loadFile');
                    }
                    dockerComposeYaml = fs_1.default
                        .readFileSync(dockerComposePath, { encoding: 'utf8' })
                        .toString();
                    return [4 /*yield*/, pureHandler({
                            dockerComposePath: dockerComposePath,
                            dockerComposeYaml: dockerComposeYaml,
                        })];
                case 1:
                    _a = _b.sent(), ok = _a.ok, newDockerComposeYaml = _a.newDockerComposeYaml;
                    if (ok) {
                        fs_1.default.writeFileSync(dockerComposePath, newDockerComposeYaml, {
                            encoding: 'utf8',
                        });
                    }
                    return [3 /*break*/, 3];
                case 2:
                    e_1 = _b.sent();
                    console.log("got an error: " + e_1.message);
                    return [2 /*return*/];
                case 3: return [2 /*return*/];
            }
        });
    }); },
};
function pureHandler(_a) {
    var dockerComposeYaml = _a.dockerComposeYaml, dockerComposePath = _a.dockerComposePath;
    var _b, _c, _d, _e;
    return __awaiter(this, void 0, void 0, function () {
        var _f, error, gitRepoUrl, dockerComposeDoc, dockerCompose, _g, stackName, stackId, region, envFiles, deployment, _h, ok, Stack, newDockerComposeYaml;
        return __generator(this, function (_j) {
            switch (_j.label) {
                case 0:
                    dockerComposePath = path_1.default.resolve(dockerComposePath);
                    return [4 /*yield*/, await_to_js_1.default(git_remote_origin_url_1.default(path_1.default.dirname(dockerComposePath)))];
                case 1:
                    _f = _j.sent(), error = _f[0], gitRepoUrl = _f[1];
                    if (error || !gitRepoUrl) {
                        console.log('cannot find git origin url, skipping github integration', error);
                        gitRepoUrl = '';
                    }
                    gitRepoUrl = gitRepoUrl.replace('.git/', '/');
                    dockerComposeDoc = yaml_1.default.parseDocument(dockerComposeYaml);
                    dockerCompose = dockerComposeDoc.toJSON();
                    support_1.validateServiceNames(dockerCompose);
                    _g = getMetaFromDockerComposeConfig({
                        config: dockerCompose,
                        path: dockerComposePath,
                    }), stackName = _g.stackName, stackId = _g.stackId, region = _g.region;
                    envFiles = getEnvFiles_1.getEnvFiles({ dockerCompose: dockerCompose, readFile: support_1.readFile });
                    return [4 /*yield*/, sdk_1.sdk.DeployStack({
                            input: {
                                stackName: stackName,
                                stackId: stackId,
                                dockerComposeYaml: dockerComposeYaml,
                                region: region,
                                gitRepoUrl: gitRepoUrl,
                                envFiles: envFiles,
                            },
                        })];
                case 2:
                    deployment = (_j.sent()).deployStack;
                    stackId = (_b = deployment) === null || _b === void 0 ? void 0 : _b._id;
                    return [4 /*yield*/, waitAndPoll({
                            stackId: stackId,
                        })];
                case 3:
                    _h = _j.sent(), ok = _h.ok, Stack = _h.Stack;
                    if (ok) {
                        dockerComposeDoc = updateDockerComposeMeta({
                            dockerComposeDoc: dockerComposeDoc,
                            meta: {
                                id: (_c = Stack) === null || _c === void 0 ? void 0 : _c._id,
                                name: ((_d = Stack) === null || _d === void 0 ? void 0 : _d.name) || '',
                                region: (_e = Stack) === null || _e === void 0 ? void 0 : _e.region,
                            },
                        });
                    }
                    newDockerComposeYaml = dockerComposeDoc.toString();
                    return [2 /*return*/, { ok: ok, newDockerComposeYaml: newDockerComposeYaml }];
            }
        });
    });
}
exports.pureHandler = pureHandler;
function getDefaultStackName(file) {
    return support_1.transformName(path_1.default.basename(path_1.default.dirname(file)));
}
function getMetaFromDockerComposeConfig(_a) {
    var config = _a.config, path = _a.path;
    var _b, _c, _d;
    var meta = config[constants_1.DOCKER_COMPOSE_CONFIG_FIELD] || {};
    return {
        stackName: support_1.validateName(((_b = meta) === null || _b === void 0 ? void 0 : _b.name) || getDefaultStackName(path)),
        stackId: (_c = meta) === null || _c === void 0 ? void 0 : _c.id,
        region: ((_d = meta) === null || _d === void 0 ? void 0 : _d.region) || constants_1.DEFAULT_REGION,
    };
}
function waitAndPoll(_a) {
    var stackId = _a.stackId;
    var _b, _c, _d, _e, _f, _g, _h, _j;
    return __awaiter(this, void 0, void 0, function () {
        var spinner, _loop_1, state_1;
        return __generator(this, function (_k) {
            switch (_k.label) {
                case 0:
                    spinner = ora_1.default('Deploying...').start();
                    _loop_1 = function () {
                        var Stack, table_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, support_1.sleep(4000)];
                                case 1:
                                    _a.sent();
                                    return [4 /*yield*/, sdk_1.sdk.IsServiceDeployed({
                                            id: stackId,
                                        })
                                        // TODO get more detailed states such as SAVING_STACK, DEPLOYING_TO_TERRAFORM, ...
                                    ];
                                case 2:
                                    Stack = (_a.sent()).Stack;
                                    // TODO get more detailed states such as SAVING_STACK, DEPLOYING_TO_TERRAFORM, ...
                                    if (((_b = Stack) === null || _b === void 0 ? void 0 : _b.status) === generatedGraphql_1.StackStatus.Active) {
                                        spinner.succeed('deployed! 🥳').stop();
                                        table_1 = new cli_table_1.default({ head: ['Name', 'Url'] });
                                        (_d = (_c = Stack) === null || _c === void 0 ? void 0 : _c.services) === null || _d === void 0 ? void 0 : _d.forEach(function (x) {
                                            var _a, _b;
                                            table_1.push([(_a = x) === null || _a === void 0 ? void 0 : _a.name, (_b = x) === null || _b === void 0 ? void 0 : _b.url]);
                                        });
                                        console.log(table_1.toString());
                                        return [2 /*return*/, { value: { ok: true, Stack: Stack } }];
                                    }
                                    if (((_e = Stack) === null || _e === void 0 ? void 0 : _e.status) === generatedGraphql_1.StackStatus.Error) {
                                        spinner.fail('Got an error 😢').stop();
                                        console.log(chalk_1.default.red(((_g = (_f = Stack) === null || _f === void 0 ? void 0 : _f.lastDeploymentError) === null || _g === void 0 ? void 0 : _g.name) +
                                            ' ' + ((_j = (_h = Stack) === null || _h === void 0 ? void 0 : _h.lastDeploymentError) === null || _j === void 0 ? void 0 : _j.message)));
                                        return [2 /*return*/, { value: { ok: false, Stack: null } }];
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _k.label = 1;
                case 1:
                    if (!true) return [3 /*break*/, 3];
                    return [5 /*yield**/, _loop_1()];
                case 2:
                    state_1 = _k.sent();
                    if (typeof state_1 === "object")
                        return [2 /*return*/, state_1.value];
                    return [3 /*break*/, 1];
                case 3: return [2 /*return*/];
            }
        });
    });
}
function updateDockerComposeMeta(_a) {
    var dockerComposeDoc = _a.dockerComposeDoc, meta = _a.meta;
    // @ts-ignore
    dockerComposeDoc.set(constants_1.DOCKER_COMPOSE_CONFIG_FIELD, meta);
    return dockerComposeDoc;
}
