"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var winston = require("winston");
var lodash_1 = require("lodash");
var fs_1 = __importDefault(require("fs"));
function getEnvFiles(_a) {
    var dockerCompose = _a.dockerCompose, readFile = _a.readFile, _b = _a.globalEnvFilePath, globalEnvFilePath = _b === void 0 ? '.env' : _b;
    var _c;
    var files = Object.keys(((_c = dockerCompose) === null || _c === void 0 ? void 0 : _c.services) || {})
        .map(function (serviceName) {
        var _a, _b, _c, _d, _e, _f, _g;
        var service = (_c = (_b = (_a = dockerCompose) === null || _a === void 0 ? void 0 : _a.services) === null || _b === void 0 ? void 0 : _b[serviceName], (_c !== null && _c !== void 0 ? _c : {}));
        if (!((_d = service) === null || _d === void 0 ? void 0 : _d.env_file)) {
            return null;
        }
        if (Array.isArray((_e = service) === null || _e === void 0 ? void 0 : _e.env_file)) {
            return (_f = service) === null || _f === void 0 ? void 0 : _f.env_file.map(function (path) {
                return {
                    path: path,
                    serviceName: serviceName,
                    content: readFile(path),
                };
            });
        }
        var path = (_g = service) === null || _g === void 0 ? void 0 : _g.env_file;
        return { path: path, content: readFile(path), serviceName: serviceName };
    })
        .filter(function (x) { return !!x; });
    files = __spreadArrays(files, [
        {
            content: fs_1.default.existsSync(globalEnvFilePath)
                ? readFile(globalEnvFilePath)
                : '',
            path: globalEnvFilePath,
            serviceName: '',
        },
    ]);
    var envFiles = dedupeAndAddServiceNames(lodash_1.flatten(files));
    winston.debug({ envFiles: envFiles });
    return envFiles;
}
exports.getEnvFiles = getEnvFiles;
function dedupeAndAddServiceNames(files) {
    return files.reduce(function (acc, file) {
        var found = acc.find(function (x) { return x.path === file.path; });
        if (found) {
            return __spreadArrays(acc.filter(function (x) { return x.path !== found.path; }), [
                __assign(__assign({}, found), { servicesDockerComposeNames: __spreadArrays((found.servicesDockerComposeNames || []), [
                        file.serviceName,
                    ]) }),
            ]);
        }
        return __spreadArrays(acc, [
            __assign(__assign({}, lodash_1.omit(file, 'serviceName')), { servicesDockerComposeNames: [file.serviceName] }),
        ]);
    }, []);
}
