"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sdk_1 = require("../sdk");
var support_1 = require("../support");
var fs_1 = __importDefault(require("fs"));
exports.DownloadCommand = {
    command: 'download',
    describe: 'download the docker compose env files',
    builder: function (argv) {
        return argv;
    },
    handler: function (argv) { return __awaiter(void 0, void 0, void 0, function () {
        var dockerComposeObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    dockerComposeObject = support_1.loadDockerCompose(argv).dockerComposeObject;
                    return [4 /*yield*/, downloadEnvFiles({
                            meta: support_1.getDockerComposeMeta(dockerComposeObject),
                            writeFile: fs_1.default.writeFileSync,
                        })];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); },
};
function downloadEnvFiles(_a) {
    var meta = _a.meta, _b = _a.globalEnvFilePath, globalEnvFilePath = _b === void 0 ? '.env' : _b, writeFile = _a.writeFile;
    var _c, _d, _e, _f, _g;
    return __awaiter(this, void 0, void 0, function () {
        var stackId, Stack, envFiles, _i, envFiles_1, file;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    stackId = meta.id;
                    if (!stackId) {
                        throw Error('cannot find stack id in docker compose, you should first deploy');
                    }
                    return [4 /*yield*/, sdk_1.sdk.DownloadEnvFiles({ id: stackId })];
                case 1:
                    Stack = (_h.sent()).Stack;
                    envFiles = ((_c = Stack) === null || _c === void 0 ? void 0 : _c.envFiles) || [];
                    for (_i = 0, envFiles_1 = envFiles; _i < envFiles_1.length; _i++) {
                        file = envFiles_1[_i];
                        if (!((_d = file) === null || _d === void 0 ? void 0 : _d.path) || !file.content) {
                            return [2 /*return*/];
                        }
                        // TODO ask if overwrite file (sopratutto .env)
                        writeFile((_e = file) === null || _e === void 0 ? void 0 : _e.path, (_f = file) === null || _f === void 0 ? void 0 : _f.content, { encoding: 'utf8' });
                    }
                    console.log("uploaded env files " + ((_g = envFiles) === null || _g === void 0 ? void 0 : _g.map(function (x) { var _a; return '"' + ((_a = x) === null || _a === void 0 ? void 0 : _a.path) + '"'; }).join(', ')));
                    return [2 /*return*/];
            }
        });
    });
}
exports.downloadEnvFiles = downloadEnvFiles;
